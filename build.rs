use std::fs;
use std::io::{Write};

fn main() {
    println!("cargo::rerun-if-changed=src/gameobjtype/types");

    const DIR:      &'static str = "src/gameobjtype/types";
    const MOD_FILE: &'static str = "src/gameobjtype/types.rs";

    let entries = fs::read_dir(DIR).expect("failed reading directory");

    let filenames = entries.map(|entry| {
        let entry = entry.expect("failed getting entry");
        let filename = entry.file_name();
        let filename = filename.into_string().expect("couldn't convert filename to string");
        filename
    });

    let filenames = filenames.filter(|filename| {
        filename != "mod.rs"
    });

    let names = filenames.map(|filename| {
        filename.trim_end_matches(".rs").to_string()
    });

    let names: Vec<_> = names.collect();

    let mut output = String::from("\
    // this file is generated by build.rs\n\
    // do not modify it directly\n\n\
    use crate::gameobjtype::GameObjectType;\n\n");

    for name in names.clone().into_iter() {
        output.push_str(&format!("mod {};\n", name).to_string());
    }

    output.push_str(&format!("\
    \npub const TYPES: [GameObjectType; {}] = [\n", names.len()).to_string());

    for name in names {
        output.push_str(&format!("    {}::TYPE,\n", name).to_string());
    }

    output.push_str("];\n");

    let output = output.into_bytes();
    let mut file = fs::File::create(MOD_FILE).expect("couldn't open or create file");
    file.write_all(&output).expect("couldn't write to file");
}
